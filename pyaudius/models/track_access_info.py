# coding: utf-8

"""
    API

    Audius V1 API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyaudius.models.access import Access
from typing import Optional, Set
from typing_extensions import Self

class TrackAccessInfo(BaseModel):
    """
    TrackAccessInfo
    """ # noqa: E501
    access: Optional[Access] = Field(default=None, description="Describes what access the given user has")
    user_id: StrictStr = Field(description="The user ID of the owner of this track")
    blocknumber: StrictInt = Field(description="The blocknumber this track was last updated")
    is_stream_gated: Optional[StrictBool] = Field(default=None, description="Whether or not the owner has restricted streaming behind an access gate")
    stream_conditions: Optional[Dict[str, Any]] = Field(default=None, description="How to unlock stream access to the track")
    is_download_gated: Optional[StrictBool] = Field(default=None, description="Whether or not the owner has restricted downloading behind an access gate")
    download_conditions: Optional[Dict[str, Any]] = Field(default=None, description="How to unlock the track download")
    __properties: ClassVar[List[str]] = ["access", "user_id", "blocknumber", "is_stream_gated", "stream_conditions", "is_download_gated", "download_conditions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrackAccessInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access
        if self.access:
            _dict['access'] = self.access.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrackAccessInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": Access.from_dict(obj["access"]) if obj.get("access") is not None else None,
            "user_id": obj.get("user_id"),
            "blocknumber": obj.get("blocknumber"),
            "is_stream_gated": obj.get("is_stream_gated"),
            "stream_conditions": obj.get("stream_conditions"),
            "is_download_gated": obj.get("is_download_gated"),
            "download_conditions": obj.get("download_conditions")
        })
        return _obj


