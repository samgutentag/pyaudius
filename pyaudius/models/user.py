# coding: utf-8

"""
    API

    Audius V1 API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyaudius.models.cover_photo import CoverPhoto
from pyaudius.models.profile_picture import ProfilePicture
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    album_count: StrictInt
    artist_pick_track_id: Optional[StrictStr] = None
    bio: Optional[StrictStr] = None
    cover_photo: Optional[CoverPhoto] = None
    followee_count: StrictInt
    follower_count: StrictInt
    handle: StrictStr
    id: StrictStr
    is_verified: StrictBool
    twitter_handle: Optional[StrictStr] = None
    instagram_handle: Optional[StrictStr] = None
    tiktok_handle: Optional[StrictStr] = None
    verified_with_twitter: StrictBool
    verified_with_instagram: StrictBool
    verified_with_tiktok: StrictBool
    website: Optional[StrictStr] = None
    donation: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    name: StrictStr
    playlist_count: StrictInt
    profile_picture: Optional[ProfilePicture] = None
    repost_count: StrictInt
    track_count: StrictInt
    is_deactivated: StrictBool
    is_available: StrictBool
    erc_wallet: StrictStr
    spl_wallet: StrictStr
    spl_usdc_payout_wallet: Optional[StrictStr] = None
    supporter_count: StrictInt
    supporting_count: StrictInt
    total_audio_balance: StrictInt
    wallet: StrictStr = Field(description="The user's Ethereum wallet address for their account")
    __properties: ClassVar[List[str]] = ["album_count", "artist_pick_track_id", "bio", "cover_photo", "followee_count", "follower_count", "handle", "id", "is_verified", "twitter_handle", "instagram_handle", "tiktok_handle", "verified_with_twitter", "verified_with_instagram", "verified_with_tiktok", "website", "donation", "location", "name", "playlist_count", "profile_picture", "repost_count", "track_count", "is_deactivated", "is_available", "erc_wallet", "spl_wallet", "spl_usdc_payout_wallet", "supporter_count", "supporting_count", "total_audio_balance", "wallet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cover_photo
        if self.cover_photo:
            _dict['cover_photo'] = self.cover_photo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile_picture
        if self.profile_picture:
            _dict['profile_picture'] = self.profile_picture.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "album_count": obj.get("album_count"),
            "artist_pick_track_id": obj.get("artist_pick_track_id"),
            "bio": obj.get("bio"),
            "cover_photo": CoverPhoto.from_dict(obj["cover_photo"]) if obj.get("cover_photo") is not None else None,
            "followee_count": obj.get("followee_count"),
            "follower_count": obj.get("follower_count"),
            "handle": obj.get("handle"),
            "id": obj.get("id"),
            "is_verified": obj.get("is_verified"),
            "twitter_handle": obj.get("twitter_handle"),
            "instagram_handle": obj.get("instagram_handle"),
            "tiktok_handle": obj.get("tiktok_handle"),
            "verified_with_twitter": obj.get("verified_with_twitter"),
            "verified_with_instagram": obj.get("verified_with_instagram"),
            "verified_with_tiktok": obj.get("verified_with_tiktok"),
            "website": obj.get("website"),
            "donation": obj.get("donation"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "playlist_count": obj.get("playlist_count"),
            "profile_picture": ProfilePicture.from_dict(obj["profile_picture"]) if obj.get("profile_picture") is not None else None,
            "repost_count": obj.get("repost_count"),
            "track_count": obj.get("track_count"),
            "is_deactivated": obj.get("is_deactivated"),
            "is_available": obj.get("is_available"),
            "erc_wallet": obj.get("erc_wallet"),
            "spl_wallet": obj.get("spl_wallet"),
            "spl_usdc_payout_wallet": obj.get("spl_usdc_payout_wallet"),
            "supporter_count": obj.get("supporter_count"),
            "supporting_count": obj.get("supporting_count"),
            "total_audio_balance": obj.get("total_audio_balance"),
            "wallet": obj.get("wallet")
        })
        return _obj


