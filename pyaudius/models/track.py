# coding: utf-8

"""
    API

    Audius V1 API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyaudius.models.remix_parent import RemixParent
from pyaudius.models.track_artwork import TrackArtwork
from pyaudius.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Track(BaseModel):
    """
    Track
    """ # noqa: E501
    artwork: TrackArtwork
    description: Optional[StrictStr] = None
    genre: StrictStr
    id: StrictStr
    track_cid: Optional[StrictStr] = None
    preview_cid: Optional[StrictStr] = None
    orig_file_cid: Optional[StrictStr] = None
    orig_filename: Optional[StrictStr] = None
    is_original_available: StrictBool
    mood: Optional[StrictStr] = None
    release_date: Optional[StrictStr] = None
    remix_of: Optional[RemixParent] = None
    repost_count: StrictInt
    favorite_count: StrictInt
    comment_count: StrictInt
    tags: Optional[StrictStr] = None
    title: StrictStr
    user: User
    duration: StrictInt
    is_downloadable: StrictBool
    play_count: StrictInt
    permalink: StrictStr
    is_streamable: Optional[StrictBool] = None
    ddex_app: Optional[StrictStr] = None
    playlists_containing_track: Optional[List[StrictInt]] = None
    pinned_comment_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["artwork", "description", "genre", "id", "track_cid", "preview_cid", "orig_file_cid", "orig_filename", "is_original_available", "mood", "release_date", "remix_of", "repost_count", "favorite_count", "comment_count", "tags", "title", "user", "duration", "is_downloadable", "play_count", "permalink", "is_streamable", "ddex_app", "playlists_containing_track", "pinned_comment_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Track from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artwork
        if self.artwork:
            _dict['artwork'] = self.artwork.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remix_of
        if self.remix_of:
            _dict['remix_of'] = self.remix_of.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Track from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artwork": TrackArtwork.from_dict(obj["artwork"]) if obj.get("artwork") is not None else None,
            "description": obj.get("description"),
            "genre": obj.get("genre"),
            "id": obj.get("id"),
            "track_cid": obj.get("track_cid"),
            "preview_cid": obj.get("preview_cid"),
            "orig_file_cid": obj.get("orig_file_cid"),
            "orig_filename": obj.get("orig_filename"),
            "is_original_available": obj.get("is_original_available"),
            "mood": obj.get("mood"),
            "release_date": obj.get("release_date"),
            "remix_of": RemixParent.from_dict(obj["remix_of"]) if obj.get("remix_of") is not None else None,
            "repost_count": obj.get("repost_count"),
            "favorite_count": obj.get("favorite_count"),
            "comment_count": obj.get("comment_count"),
            "tags": obj.get("tags"),
            "title": obj.get("title"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "duration": obj.get("duration"),
            "is_downloadable": obj.get("is_downloadable"),
            "play_count": obj.get("play_count"),
            "permalink": obj.get("permalink"),
            "is_streamable": obj.get("is_streamable"),
            "ddex_app": obj.get("ddex_app"),
            "playlists_containing_track": obj.get("playlists_containing_track"),
            "pinned_comment_id": obj.get("pinned_comment_id")
        })
        return _obj


